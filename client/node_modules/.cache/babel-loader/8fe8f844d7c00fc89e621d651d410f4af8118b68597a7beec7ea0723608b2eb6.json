{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abc\\\\Downloads\\\\ecommerce-chat-helper\\\\client\\\\src\\\\components\\\\ChatWidget.js\",\n  _s = $RefreshSig$();\n// Import React and its hooks for component state and lifecycle management\nimport React, { useState, useEffect, useRef } from 'react';\n// Import Font Awesome icons for the chat interface\nimport { FaRobot, FaPaperPlane, FaTimes, FaCommentDots } from 'react-icons/fa';\n\n// Main chat widget component\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatWidget = () => {\n  _s();\n  // State to track if chat window is open or closed\n  const [isOpen, setIsOpen] = useState(false);\n  // State to store all chat messages (array of message objects)\n  const [messages, setMessages] = useState([]);\n  // State to track current input field value\n  const [inputValue, setInputValue] = useState('');\n  // State to store conversation thread ID (null for new conversations)\n  const [threadId, setThreadId] = useState(null);\n  // Ref to reference the bottom of messages container for auto-scrolling\n  const messagesEndRef = useRef(null);\n\n  // Effect hook: Show initial greeting when chat is first opened\n  useEffect(() => {\n    // Only run if chat is open AND no messages exist yet\n    if (isOpen && messages.length === 0) {\n      // Create initial greeting message\n      const initialMessages = [{\n        text: \"Hello! I'm your shopping assistant. How can I help you today?\",\n        // Greeting text\n        isAgent: true // Flag to indicate this is from the AI agent\n      }];\n      // Add greeting to messages state\n      setMessages(initialMessages);\n    }\n  }, [isOpen, messages.length]); // Dependencies: re-run when isOpen or message count changes\n\n  // Effect hook: Auto-scroll to bottom when new messages are added\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    // Scroll the messages container to bottom smoothly\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]); // Dependency: re-run whenever messages array changes\n\n  // Function to toggle chat window open/closed\n  const toggleChat = () => {\n    // Flip the current isOpen state (true becomes false, false becomes true)\n    setIsOpen(!isOpen);\n  };\n\n  // Function to handle changes in the input field\n  const handleInputChange = e => {\n    // Update inputValue state with current text field value\n    setInputValue(e.target.value);\n  };\n\n  // Log messages to console for debugging purposes\n  console.log(messages);\n\n  // Function to send user message and get AI response\n  const handleSendMessage = async e => {\n    // Prevent default form submission behavior (page refresh)\n    e.preventDefault();\n    // Log user input for debugging\n    console.log(inputValue);\n\n    // Create message object for user's input\n    const message = {\n      text: inputValue,\n      // User's typed message\n      isAgent: false // Flag indicating this is from user, not AI\n    };\n\n    // Add user message to messages array using spread operator\n    setMessages(prevMessages => [...prevMessages, message]);\n    // Clear input field immediately after sending\n    setInputValue(\"\");\n\n    // Determine API endpoint: use existing thread if available, otherwise create new\n    const endpoint = threadId ? `http://localhost:8000/chat/${threadId}` : 'http://localhost:8000/chat';\n    try {\n      // Make HTTP POST request to backend API\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        // HTTP method\n        headers: {\n          'Content-Type': 'application/json' // Tell server we're sending JSON\n        },\n        body: JSON.stringify({\n          message: inputValue // Send user's message in request body\n        })\n      });\n\n      // Check if response status indicates success (200-299 range)\n      if (!response.ok) {\n        // Throw error if response status indicates failure\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      // Parse JSON response from server\n      const data = await response.json();\n      // Log successful response for debugging\n      console.log('Success:', data);\n\n      // Create message object for AI agent's response\n      const agentResponse = {\n        text: data.response,\n        // AI's response text\n        isAgent: true,\n        // Flag indicating this is from AI agent\n        threadId: data.threadId // Thread ID for conversation continuity\n      };\n\n      // Add AI response to messages array\n      setMessages(prevMessages => [...prevMessages, agentResponse]);\n      // Update thread ID for future messages in this conversation\n      setThreadId(data.threadId);\n      // Log updated messages for debugging\n      console.log(messages);\n    } catch (error) {\n      // Log any errors that occur during API call\n      console.error('Error:', error);\n    }\n  };\n\n  // Render the chat widget UI\n  return (\n    /*#__PURE__*/\n    // Main container with conditional CSS class based on open/closed state\n    _jsxDEV(\"div\", {\n      className: `chat-widget-container ${isOpen ? 'open' : ''}`,\n      children: isOpen ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-title\",\n            children: [/*#__PURE__*/_jsxDEV(FaRobot, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Shop Assistant\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"close-button\",\n            onClick: toggleChat,\n            children: /*#__PURE__*/_jsxDEV(FaTimes, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-messages\",\n          children: [messages.map((message, index) =>\n          /*#__PURE__*/\n          // Container for each message (key prop required for React lists)\n          _jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `message ${message.isAgent ? 'message-bot' : 'message-user'}`,\n              children: message.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"chat-input-container\",\n          onSubmit: handleSendMessage,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\" // Input type\n            ,\n            className: \"message-input\" // CSS class for styling\n            ,\n            placeholder: \"Type your message...\" // Placeholder text\n            ,\n            value: inputValue // Controlled input value\n            ,\n            onChange: handleInputChange // Handle input changes\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\" // Submit form when clicked\n            ,\n            className: \"send-button\" // CSS class for styling\n            ,\n            disabled: inputValue.trim() === '' // Disable if input is empty or whitespace\n            ,\n            children: /*#__PURE__*/_jsxDEV(FaPaperPlane, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true) :\n      /*#__PURE__*/\n      /* Chat toggle button (shown when chat is closed) */\n      _jsxDEV(\"button\", {\n        className: \"chat-button\",\n        onClick: toggleChat,\n        children: /*#__PURE__*/_jsxDEV(FaCommentDots, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n// Export component as default export\n_s(ChatWidget, \"DHXUkHhoYyoC7iXdxGUU969D4Go=\");\n_c = ChatWidget;\nexport default ChatWidget;\nvar _c;\n$RefreshReg$(_c, \"ChatWidget\");","map":{"version":3,"names":["React","useState","useEffect","useRef","FaRobot","FaPaperPlane","FaTimes","FaCommentDots","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatWidget","_s","isOpen","setIsOpen","messages","setMessages","inputValue","setInputValue","threadId","setThreadId","messagesEndRef","length","initialMessages","text","isAgent","_messagesEndRef$curre","current","scrollIntoView","behavior","toggleChat","handleInputChange","e","target","value","console","log","handleSendMessage","preventDefault","message","prevMessages","endpoint","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","agentResponse","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","index","ref","onSubmit","type","placeholder","onChange","disabled","trim","size","_c","$RefreshReg$"],"sources":["C:/Users/abc/Downloads/ecommerce-chat-helper/client/src/components/ChatWidget.js"],"sourcesContent":["// Import React and its hooks for component state and lifecycle management\r\nimport React, { useState, useEffect, useRef } from 'react'\r\n// Import Font Awesome icons for the chat interface\r\nimport { FaRobot, FaPaperPlane, FaTimes, FaCommentDots } from 'react-icons/fa'\r\n\r\n// Main chat widget component\r\nconst ChatWidget = () => {\r\n  // State to track if chat window is open or closed\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  // State to store all chat messages (array of message objects)\r\n  const [messages, setMessages] = useState([])\r\n  // State to track current input field value\r\n  const [inputValue, setInputValue] = useState('')\r\n  // State to store conversation thread ID (null for new conversations)\r\n  const [threadId, setThreadId] = useState(null)\r\n  // Ref to reference the bottom of messages container for auto-scrolling\r\n  const messagesEndRef = useRef(null)\r\n\r\n  // Effect hook: Show initial greeting when chat is first opened\r\n  useEffect(() => {\r\n    // Only run if chat is open AND no messages exist yet\r\n    if (isOpen && messages.length === 0) {\r\n      // Create initial greeting message\r\n      const initialMessages = [\r\n        {\r\n          text: \"Hello! I'm your shopping assistant. How can I help you today?\", // Greeting text\r\n          isAgent: true // Flag to indicate this is from the AI agent\r\n        }\r\n      ]\r\n      // Add greeting to messages state\r\n      setMessages(initialMessages)\r\n    }\r\n  }, [isOpen, messages.length]) // Dependencies: re-run when isOpen or message count changes\r\n\r\n  // Effect hook: Auto-scroll to bottom when new messages are added\r\n  useEffect(() => {\r\n    // Scroll the messages container to bottom smoothly\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })\r\n  }, [messages]) // Dependency: re-run whenever messages array changes\r\n\r\n  // Function to toggle chat window open/closed\r\n  const toggleChat = () => {\r\n    // Flip the current isOpen state (true becomes false, false becomes true)\r\n    setIsOpen(!isOpen)\r\n  }\r\n\r\n  // Function to handle changes in the input field\r\n  const handleInputChange = (e) => {\r\n    // Update inputValue state with current text field value\r\n    setInputValue(e.target.value)\r\n  }\r\n\r\n  // Log messages to console for debugging purposes\r\n  console.log(messages)\r\n  \r\n  // Function to send user message and get AI response\r\n  const handleSendMessage = async (e) => {\r\n    // Prevent default form submission behavior (page refresh)\r\n    e.preventDefault()\r\n    // Log user input for debugging\r\n    console.log(inputValue)\r\n\r\n    // Create message object for user's input\r\n    const message = {\r\n      text: inputValue,  // User's typed message\r\n      isAgent: false,    // Flag indicating this is from user, not AI\r\n    }\r\n\r\n    // Add user message to messages array using spread operator\r\n    setMessages(prevMessages => [...prevMessages, message])\r\n    // Clear input field immediately after sending\r\n    setInputValue(\"\")\r\n\r\n    // Determine API endpoint: use existing thread if available, otherwise create new\r\n    const endpoint = threadId ? `http://localhost:8000/chat/${threadId}` : 'http://localhost:8000/chat'\r\n\r\n    try {\r\n      // Make HTTP POST request to backend API\r\n      const response = await fetch(endpoint, {\r\n        method: 'POST', // HTTP method\r\n        headers: {\r\n          'Content-Type': 'application/json', // Tell server we're sending JSON\r\n        },\r\n        body: JSON.stringify({\r\n          message: inputValue // Send user's message in request body\r\n        }),\r\n      })\r\n\r\n      // Check if response status indicates success (200-299 range)\r\n      if (!response.ok) {\r\n        // Throw error if response status indicates failure\r\n        throw new Error(`HTTP error! status: ${response.status}`)\r\n      }\r\n\r\n      // Parse JSON response from server\r\n      const data = await response.json()\r\n      // Log successful response for debugging\r\n      console.log('Success:', data)\r\n      \r\n      // Create message object for AI agent's response\r\n      const agentResponse = {\r\n        text: data.response,    // AI's response text\r\n        isAgent: true,          // Flag indicating this is from AI agent\r\n        threadId: data.threadId // Thread ID for conversation continuity\r\n      }\r\n      \r\n      // Add AI response to messages array\r\n      setMessages(prevMessages => [...prevMessages, agentResponse])\r\n      // Update thread ID for future messages in this conversation\r\n      setThreadId(data.threadId)\r\n      // Log updated messages for debugging\r\n      console.log(messages)\r\n    } catch (error) {\r\n      // Log any errors that occur during API call\r\n      console.error('Error:', error)\r\n    }\r\n  }\r\n\r\n  // Render the chat widget UI\r\n  return (\r\n    // Main container with conditional CSS class based on open/closed state\r\n    <div className={`chat-widget-container ${isOpen ? 'open' : ''}`}>\r\n      {/* Conditional rendering: show chat interface if open, otherwise show chat button */}\r\n      {isOpen ? (\r\n        <>\r\n          {/* Chat header with title and close button */}\r\n          <div className=\"chat-header\">\r\n            <div className=\"chat-title\">\r\n              {/* Robot icon */}\r\n              <FaRobot />\r\n              {/* Chat title text */}\r\n              <h3>Shop Assistant</h3>\r\n            </div>\r\n            {/* Close button with X icon */}\r\n            <button className=\"close-button\" onClick={toggleChat}>\r\n              <FaTimes />\r\n            </button>\r\n          </div>\r\n\r\n          {/* Messages container */}\r\n          <div className=\"chat-messages\">\r\n            {/* Map through messages array to render each message */}\r\n            {messages.map((message, index) => (\r\n              // Container for each message (key prop required for React lists)\r\n              <div key={index}>\r\n                {/* Message bubble with conditional CSS class for styling */}\r\n                <div className={`message ${message.isAgent ? 'message-bot' : 'message-user'}`}>\r\n                  {/* Display message text */}\r\n                  {message.text}\r\n                </div>\r\n              </div>\r\n            ))}\r\n\r\n            {/* Invisible div at bottom for auto-scroll reference */}\r\n            <div ref={messagesEndRef} />\r\n          </div>\r\n\r\n          {/* Input form for sending messages */}\r\n          <form className=\"chat-input-container\" onSubmit={handleSendMessage}>\r\n            {/* Text input field */}\r\n            <input\r\n              type=\"text\"                           // Input type\r\n              className=\"message-input\"             // CSS class for styling\r\n              placeholder=\"Type your message...\"    // Placeholder text\r\n              value={inputValue}                    // Controlled input value\r\n              onChange={handleInputChange}          // Handle input changes\r\n            />\r\n            {/* Send button */}\r\n            <button\r\n              type=\"submit\"                         // Submit form when clicked\r\n              className=\"send-button\"               // CSS class for styling\r\n              disabled={inputValue.trim() === ''}   // Disable if input is empty or whitespace\r\n            >\r\n              {/* Paper plane icon for send button */}\r\n              <FaPaperPlane size={16} />\r\n            </button>\r\n          </form>\r\n        </>\r\n      ) : (\r\n        /* Chat toggle button (shown when chat is closed) */\r\n        <button className=\"chat-button\" onClick={toggleChat}>\r\n          {/* Comment/chat icon */}\r\n          <FaCommentDots />\r\n        </button>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\n// Export component as default export\r\nexport default ChatWidget"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}